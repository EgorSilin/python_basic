"""3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список выводится на экран.

Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента
и вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число)
и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class IsNotNum(Exception):
    def __init__(self, txt):
        self.txt = txt

    @staticmethod
    def is_float(str_num):
        try:
            float(str_num)
            return True
        except ValueError:
            return False


if __name__ == '__main__':
    data_list = []
    while True:
        try:
            inp_data = input("Введите следующее число для списка (для завершения работы введите 'stop'):")
            if inp_data == 'stop':
                break
            elif not IsNotNum.is_float(inp_data):
                raise IsNotNum("Введеный элемент не является числом, поэтому не будет внесен в список!")
        except IsNotNum as er:
            print(er)
            continue
        else:
            data_list.append(inp_data)
    print(f"Итоговый список чисел: {data_list}.")
